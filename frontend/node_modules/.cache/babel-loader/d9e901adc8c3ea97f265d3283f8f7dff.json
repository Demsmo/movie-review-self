{"ast":null,"code":"import axios from 'axios';\nconst LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\nvar baseURL;\nbaseURL = 'http://127.0.0.1:8000/';\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\n// api.interceptors.request.use(\n//     config => {\n//         if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n//             config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n//         }\n//         return config;\n//     },\n//     err => {\n//         console.error(err);\n//     }\n// );\n\nexport default class API {\n  constructor() {\n    this.getMovies = async params => {\n      let url = '/movies/';\n      let query = new URLSearchParams();\n\n      for (const key in params) {\n        if (params[key] != null) {\n          query.append(key, params[key]);\n        }\n      }\n\n      if (query.toString() != '') {\n        url += '?' + query.toString();\n      }\n\n      const places = await api.get(url).then(response => {\n        console.log(response.data);\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return places;\n    };\n  }\n\n}","map":{"version":3,"names":["axios","LOGIN_USER_KEY","baseURL","api","create","headers","API","getMovies","params","url","query","URLSearchParams","key","append","toString","places","get","then","response","console","log","data","catch","error","Error"],"sources":["/Users/demsmo/Desktop/moviereview 2 edited/frontend/src/API.js"],"sourcesContent":["import axios from 'axios';\nconst LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\n\nvar baseURL;\nbaseURL = 'http://127.0.0.1:8000/';\n\nconst api = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\n// api.interceptors.request.use(\n//     config => {\n//         if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n//             config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n//         }\n\n//         return config;\n//     },\n//     err => {\n//         console.error(err);\n//     }\n// );\n\nexport default class API {\n    getMovies = async params => {\n        let url = '/movies/';\n        let query = new URLSearchParams();\n        for (const key in params) {\n            if (params[key] != null) {\n                query.append(key, params[key]);\n            }\n        }\n\n        if (query.toString() != '') {\n            url += '?' + query.toString();\n        }\n        const places = await api\n            .get(url)\n            .then(response => {\n                console.log(response.data);\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return places;\n    };\n}\n\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,cAAc,GAAG,yBAAvB;AAEA,IAAIC,OAAJ;AACAA,OAAO,GAAG,wBAAV;AAEA,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAN,CAAa;EACrBF,OAAO,EAAEA,OADY;EAErBG,OAAO,EAAE;IACL,gBAAgB;EADX;AAFY,CAAb,CAAZ;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,GAAN,CAAU;EAAA;IAAA,KACrBC,SADqB,GACT,MAAMC,MAAN,IAAgB;MACxB,IAAIC,GAAG,GAAG,UAAV;MACA,IAAIC,KAAK,GAAG,IAAIC,eAAJ,EAAZ;;MACA,KAAK,MAAMC,GAAX,IAAkBJ,MAAlB,EAA0B;QACtB,IAAIA,MAAM,CAACI,GAAD,CAAN,IAAe,IAAnB,EAAyB;UACrBF,KAAK,CAACG,MAAN,CAAaD,GAAb,EAAkBJ,MAAM,CAACI,GAAD,CAAxB;QACH;MACJ;;MAED,IAAIF,KAAK,CAACI,QAAN,MAAoB,EAAxB,EAA4B;QACxBL,GAAG,IAAI,MAAMC,KAAK,CAACI,QAAN,EAAb;MACH;;MACD,MAAMC,MAAM,GAAG,MAAMZ,GAAG,CACnBa,GADgB,CACZP,GADY,EAEhBQ,IAFgB,CAEXC,QAAQ,IAAI;QACdC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;QACA,OAAOH,QAAQ,CAACG,IAAhB;MACH,CALgB,EAMhBC,KANgB,CAMVC,KAAK,IAAI;QACZ,MAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;MACH,CARgB,CAArB;MASA,OAAOR,MAAP;IACH,CAvBoB;EAAA;;AAAA"},"metadata":{},"sourceType":"module"}